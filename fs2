#!/usr/bin/env python

import sys,os,time
import click
from fs import open_fs, errors
from fs.path import relpath, normpath, basename, dirname
import shutil
from fs.words2lines import words2lines

def _listopener():
    from fs.opener  import registry
    openers = set(registry.get_opener(i).__class__ for i in  registry.protocols)
    for opener in openers:
        print(str(opener), 'for', ['%s://' % i for i in opener.protocols])

@click.group(invoke_without_command=True) #https://click.palletsprojects.com/en/7.x/commands/#group-invocation-without-command
@click.option('--listopener', '-l', is_flag=True, help='list supported file system')
@click.option('--url', '-u', default='.', help='filesystem url: default is ".", eg. file:///tmp or webdav://user:pass@127.0.0.1/webdav/subdir/')
@click.pass_context
def fs2(ctx, listopener, url):
    # print(vars(ctx), listopener, url)
    if listopener:
        _listopener()
        return
    if not (ctx.args or ctx.invoked_subcommand):
        click.echo(ctx.get_help())
    if '://' not in url:
        url = 'file://' + url
    ctx.ensure_object(dict)
    ctx.obj['url'] = url
    ctx.obj['fs'] = open_fs(url)

@fs2.command()
# @click.option('--path', default='.', help='ls <path>')
@click.argument('paths', nargs=-1, required=False) # 不限个数
@click.pass_context
def ls(ctx, paths):
    fs = ctx.obj['fs']
    url = ctx.obj['url']
    paths = paths or ['.']
    for path in paths:
        _path = path
        path = relpath(normpath(path))
        try:
            names = fs.listdir(path)
            if url.lower().startswith('file://') or url.lower().startswith('osfs://'):
                names.sort(key=lambda x: x.lstrip('.').lstrip('_').lower()) # sort as /bin/ls do
                # names = ['.', '..'] + names       # need not
            if len(paths) > 1:
                print('%s/:' % _path.rstrip('/'))
            print('\n'.join(words2lines(names)))
        except errors.DirectoryExpected:
            print('%s:' % _path.rstrip('/'))
        print()

@fs2.command()
@click.argument('paths', nargs=-1)
@click.pass_context
def cat(ctx, paths):
    fs = ctx.obj['fs']
    for path in paths:
        path = relpath(normpath(path))
        try:
            print('-------------------- cat %s --------------------' % path)
            result = fs.readbytes(path)
        except errors.FileExpected:
            print('Error: %s/ is a dir' % path, file=sys.stderr)
        else:
            print(result.decode(sys.getdefaultencoding(), 'replace'))

if __name__ == '__main__':
    fs2()
